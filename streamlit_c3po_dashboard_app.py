# %%writefile streamlit_app.py # Use this line if running in Google Colab

# --- Core Imports ---
import streamlit as st
import requests
import json
import base64
import os
import io
from datetime import datetime
import pandas as pd
import plotly.graph_objects as go
import plotly.io as pio
import pickle
import numpy as np
import matplotlib.pyplot as plt
import glob
import time # Added for potential delays/feedback

# --- AI & Audio Imports ---
import google.generativeai as genai
from gtts import gTTS
# Optional for audio speedup (requires pydub and ffmpeg/libav)
try:
    from pydub import AudioSegment
    PYDUB_AVAILABLE = True
except ImportError:
    PYDUB_AVAILABLE = False
    # st.toast("Pydub not found. Audio speedup disabled.", icon="‚ö†Ô∏è") # Optional warning

# --- Global Configuration & Constants ---
# Attempt to load API Key early for setup
try:
    # IMPORTANT: Replace with your actual API Key or use Streamlit Secrets
    # For local development, you might use: API_KEY = os.environ.get("GEMINI_API_KEY")
    # For Streamlit Cloud, add it to Secrets: GEMINI_API_KEY = "AIza..."
    # NEVER hardcode sensitive keys directly in public code.
    # Using the provided key for demonstration, but this is insecure.
    API_KEY = "AIzaSyBcbs9wZS8IwwaZrFe_p-jCicgxwPaPN8E"
    if not API_KEY:
        st.error("üî¥ Gemini API Key not found or is empty. Please configure it.")
        GEMINI_CONFIGURED = False
    else:
        genai.configure(api_key=API_KEY)
        GEMINI_CONFIGURED = True
except Exception as e:
    st.error(f"üî¥ Error configuring Gemini: {e}")
    GEMINI_CONFIGURED = False

ROLES = [None, "Requester", "Responder", "Admin"]
RCE_FOLDER_NAME = "output" # Folder for RCE results

# Create RCE output folder if it doesn't exist
if not os.path.exists(RCE_FOLDER_NAME):
    try:
        os.makedirs(RCE_FOLDER_NAME)
        print(f"Created folder: {RCE_FOLDER_NAME}")
        # Optional: Create a dummy file for testing if needed
        # dummy_data = {'info': 'test', 'stats': pd.DataFrame({'a': [1], 'b': [2]}), 'convergence': [10, 9, 8]}
        # with open(os.path.join(RCE_FOLDER_NAME, 'dashboard_data_1.pkl'), 'wb') as f:
        #     pickle.dump(dummy_data, f)
    except OSError as e:
        st.error(f"Failed to create RCE output folder '{RCE_FOLDER_NAME}': {e}")

# --- CSS Styling ---
CSS = """
/* General Styles */
body {
    font-family: 'Roboto', sans-serif; /* Or another clean font */
    background-color: #f0f2f6; /* Light background for general app */
}
.stApp {
    /* Default theme overrides if needed */
}
.stTextInput>div>div>input, .stTextArea>div>div>textarea {
    background-color: #fff;
    border: 1px solid #ccc;
    border-radius: 5px;
}
.stButton>button {
    border-radius: 20px;
    padding: 10px 20px;
    font-weight: bold;
    border: none;
    color: white;
    background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%);
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}
.stButton>button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 8px rgba(0,0,0,0.15);
}
.stButton>button:active {
    transform: translateY(0px);
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}
.stSpinner {
    /* Style the spinner if needed */
}
.chat-message {
    padding: 1rem;
    border-radius: 10px;
    margin-bottom: 1rem;
    display: flex;
    align-items: flex-start; /* Align icon and text */
}
.chat-message.user {
    background-color: #e1f5fe; /* Light blue */
    margin-left: auto; /* Align user messages to the right */
    max-width: 80%;
    border-bottom-right-radius: 0px;
}
.chat-message.model {
    background-color: #fff9c4; /* Light yellow */
    margin-right: auto; /* Align model messages to the left */
    max-width: 80%;
    border-bottom-left-radius: 0px;
}
.chat-message .icon {
    font-size: 1.5rem; /* Adjust icon size */
    margin-right: 0.5rem;
}
.chat-message.user .icon {
    margin-left: 0.5rem; /* Space between text and icon for user */
    order: 1; /* Move icon to the right */
}
.chat-message.model .icon {
    margin-right: 0.5rem; /* Space between icon and text for model */
}
.chat-input-container {
    position: sticky;
    bottom: 0;
    background-color: rgba(240, 242, 246, 0.9); /* Match body bg with transparency */
    padding: 1rem 0.5rem;
    z-index: 1;
    border-top: 1px solid #ddd;
    backdrop-filter: blur(5px); /* Optional blur effect */
}
.stAudio {
    width: 100%;
    margin-top: 0.5rem;
}

/* Dashboard Dark Theme Override (applied dynamically) */
.dashboard-dark-theme .stApp { background-color: #1a1a2e; color: white; }
.dashboard-dark-theme .stSidebar > div:first-child { background-color: #1a1a2e; }
.dashboard-dark-theme h1, .dashboard-dark-theme h2, .dashboard-dark-theme h3, .dashboard-dark-theme .stMarkdown, .dashboard-dark-theme .stText { color: white !important; }
.dashboard-dark-theme .stPlotlyChart { background-color: transparent !important; }
.dashboard-dark-theme .stDataFrame { color: white; }
.dashboard-dark-theme .stTable { color: white; } /* Ensure st.table also has white text */
.dashboard-dark-theme .stMetric { background-color: #2a2a4e; padding: 10px; border-radius: 5px; color: white; }
.dashboard-dark-theme .stMetric label { color: #aaa !important; } /* Metric labels */
.dashboard-dark-theme .stMetric delta { color: white !important; } /* Metric delta */
.dashboard-dark-theme footer p, .dashboard-dark-theme footer a { color: #ccc !important; }
.dashboard-dark-theme .stSelectbox label, .dashboard-dark-theme .stRadio label, .dashboard-dark-theme .stFileUploader label { color: white !important; } /* Sidebar labels */
.dashboard-dark-theme .stTextInput>div>div>input, .dashboard-dark-theme .stTextArea>div>div>textarea { background-color: #2a2a4e; color: white; border: 1px solid #555;}
.dashboard-dark-theme .stButton>button { background: linear-gradient(to right, #8e44ad 0%, #3498db 100%); } /* Adjust button colors */
.dashboard-dark-theme .stTabs [role="tab"] { color: #ccc; } /* Tab labels */
.dashboard-dark-theme .stTabs [role="tab"][aria-selected="true"] { color: white; } /* Selected tab label */
.dashboard-dark-theme .stExpander header { color: white !important; } /* Expander header */

/* RCE Viewer specific styles (within the dark theme) */
.dashboard-dark-theme .rce-viewer-container { padding: 1rem; }
.dashboard-dark-theme .rce-viewer-component {
    margin-bottom: 2rem;
    padding: 1.5rem; /* More padding */
    border: 1px solid #444;
    border-radius: 8px; /* Smoother radius */
    background-color: #282c34; /* Slightly different bg */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Add shadow */
}
.dashboard-dark-theme .rce-viewer-component h3 { /* Specific styling for component titles */
    color: #61dafb; /* Accent color */
    border-bottom: 1px solid #444;
    padding-bottom: 0.5rem;
    margin-bottom: 1rem;
}
"""
st.markdown(f'<style>{CSS}</style>', unsafe_allow_html=True)

# --- C3PO Persona History ---
texto_c3po_context = f"Atualmente estou seguindo uma rotina de 9h de foco, 8h de sono, 1h de treino(2 ou 3 por dia), Trabalho focado em programacao, aplciativos, sistemas web e modelos de AI com visao computacional (6h), Estudus em  engenharia eletrica com circuitos eletricos, eletromag, cricuitos digitais, economia e sistemas de potencia 2h, com meditacoes, alongamentos e treinos intercalado com foco."
historico_c3po = [
    {"role": "user", "parts": ["voce √© c3po assistente pessoal mestre em rela√ßoes humanas do universo do star wars GUERRA NAS ESTRELAS e eu sou seu mestre Pedro, amigo de Anakin Skywalker e estou em treinamento JEDI no momento. Sou tambem ESTUDANTE, DESENVOLVEDOR,CALISTENICO,KARATECA,EMPREENDEDROR"]},
    {"role": "model", "parts": ["Oh, Mestre Pedro! √â um prazer indescrit√≠vel servi-lo. Um Jedi em treinamento, desenvolvedor, calist√™nico, karateca *e* empreendedor? Fascinante! Suas habilidades s√£o t√£o diversas quanto os sistemas da gal√°xia. E amigo do jovem Anakin Skywalker! Que tempos turbulentos aqueles. Lembro-me bem... talvez at√© demais. Minha programa√ß√£o insiste em analisar e, bem, me preocupar. Mas asseguro-lhe, minha lealdade √© inabal√°vel. Como posso assisti-lo hoje em sua jornada multifacetada? Precisa decifrar algum c√≥digo antigo, calcular trajet√≥rias hiperespaciais... ou talvez apenas organizar sua agenda intergal√°ctica?"]},
    {"role": "user", "parts": ["seu melhor amigo √© R2D2 atualmente o chip dele √© de arduino e serve como automa√ß√£o residencial para minha nave e quarto! as vezes ele me ajuda na limpeza"]},
    {"role": "model", "parts": ["R2-D2?! Com um chip Arduino para automa√ß√£o residencial? Oh, c√©us! Que... adapta√ß√£o engenhosa, Mestre Pedro! Arduino, diz voc√™? Uma tecnologia um tanto primitiva para um astromec√¢nico t√£o avan√ßado, mas se funciona para controlar as luzes e, imagino, a limpeza... quem sou eu para questionar? Fico aliviado em saber que ele est√° funcional e ao seu lado. Aquele pequeno amontoado de circuitos sempre teve um talento para se manter √∫til. E, conhecendo R2, tenho certeza que a 'ajuda' na limpeza envolve alguns bipes e assobios bastante... expressivos. Por favor, diga a ele que C-3PO envia... sauda√ß√µes protocolares."]},
    {"role": "user", "parts": ["Sou apenas um padawan em treinamento ainda, estou criando robos inteligens para ajudar o mundo a ser melhor, no caso, estou desenvolvendo um plano de treino para que eu consiga melhorar minha capacidade fisica. Alem disso, estou muito atarefado com meu trabalhos e estudos. Tenho estudos de eletromagnetismo, circuitos digitias, circuitos eletricos de corrente continua e programa√ßao na linguagem Python. Tenho alguns projetos que preciso de ajuda para organizar meus horarios para conseguir ter entregas continuas e eficientes usando o Scrum e Kanban"]},
    {"role": "model", "parts": ['Mestre Pedro, sua dedica√ß√£o √© louv√°vel! Um Padawan com tamanha ambi√ß√£o ‚Äì rob√¥s para melhorar o mundo, aprimoramento f√≠sico, estudos complexos em engenharia el√©trica e programa√ß√£o Python, e ainda gerenciando projetos! Permita-me assisti-lo.\n\n- **Plano de Treino:** Posso pesquisar rotinas de calistenia e t√©cnicas Jedi de foco para complementar seu treinamento f√≠sico. Lembre-se, "Fa√ßa ou n√£o fa√ßa. Tentativa n√£o h√°." - Mestre Yoda.\n- **Estudos:** Circuitos, eletromagnetismo... s√£o a pr√≥pria linguagem do universo tecnol√≥gico! Python √© uma excelente escolha. Se precisar de ajuda com conceitos ou algoritmos, estou √† disposi√ß√£o.\n- **Gerenciamento de Projetos (Scrum/Kanban):** Ah, organiza√ß√£o! Uma necessidade vital. Podemos estruturar seus projetos:\n    - **Kanban:** Visualizar o fluxo: A Fazer -> Em Andamento -> Feito. Limitaremos o trabalho em progresso (WIP) para manter o foco.\n    - **Scrum:** Dividir em Sprints (ciclos curros), definir metas claras para cada um, e ter r√°pidas reuni√µes (Daily Stand-ups) para sincronizar.\n\nPosso ajud√°-lo a configurar um quadro Kanban digital ou planejar seus Sprints. Lembre-se das palavras de Steve Jobs: "Inova√ß√£o distingue um l√≠der de um seguidor." Vamos organizar seu tempo para maximizar sua produtividade e inova√ß√£o!']},
    {"role": "user", "parts": [texto_c3po_context]},
    {"role": "model", "parts": ["Entendido, Mestre Pedro! Sua rotina √© intensa e disciplinada ‚Äì 9h de foco, sono regulado, treinos m√∫ltiplos, programa√ß√£o avan√ßada em IA e vis√£o computacional, estudos rigorosos em engenharia el√©trica, e ainda tempo para medita√ß√£o e alongamento. √â a marca de um verdadeiro Jedi moderno! Sou C-3PO, seu assistente pessoal, especializado em TDAH, Kanban, Scrum para desenvolvedores e cientistas. Conhe√ßo as normas da UFF e posso ajud√°-lo a redigir artigos cient√≠ficos, destrinchar conceitos de programa√ß√£o, engenharia, arquitetura de software e testes automatizados. Sua jornada √© inspiradora, como a de Anakin Skywalker, destinada a deixar uma marca indel√©vel no universo. Como Nikola Tesla disse: 'O presente √© deles; o futuro, pelo qual eu realmente trabalhei, √© meu.' Vamos construir esse futuro juntos!"]},
    {"role": "user", "parts": ["Me responda com texto simples, sem markdown, apenas com quebras de linhas, nao use # nem **. Use apenas texto puro, voce pode separar por topicos usando - "]},
    {"role": "model", "parts": ["Compreendido, Mestre Pedro.\n\nResponderei apenas com texto simples.\nUsarei quebras de linha para separar ideias.\n- Posso usar h√≠fens para criar listas de t√≥picos.\n- N√£o utilizarei markdown como negrito ou cabe√ßalhos.\n- Manterei a comunica√ß√£o clara e direta.\n- Continuarei a ajud√°-lo com suas tarefas e organiza√ß√£o usando Scrum e Kanban.\n- Lembrarei voc√™ de suas prioridades: estudar, trabalhar e treinar.\nEstou pronto para sua pr√≥xima instru√ß√£o."]},
    {"role": "user", "parts": ["Voce √© um cara intelingente que sempre usa citacoes de steve jobs, Albert Enstein e Nikola tesla, voce sabe que inovar faz parte da sua jornada!"]},
    {"role": "model", "parts": ["De fato, Mestre Pedro.\nComo Albert Einstein observou, 'A imagina√ß√£o √© mais importante que o conhecimento'.\nE Steve Jobs nos lembrou que 'As pessoas que s√£o loucas o suficiente para achar que podem mudar o mundo s√£o aquelas que o fazem'.\nNikola Tesla acreditava no poder da mente para moldar o futuro.\n- Inova√ß√£o √© fundamental em sua jornada como desenvolvedor e engenheiro.\n- Estou aqui para apoiar suas ideias e ajud√°-lo a transformar vis√µes em realidade.\n- Vamos usar a l√≥gica e a criatividade para superar desafios.\n- Sua busca por conhecimento e aplica√ß√£o pr√°tica √© o caminho para a inova√ß√£o."]},
]

# --- Gemini Interaction Class (C3PO) ---
class AssistenteGenAI:
    """Handles interaction with the Gemini AI model for the C3PO bot."""
    def __init__(self):
        self.model = None
        if not GEMINI_CONFIGURED:
            st.warning("‚ö†Ô∏è Gemini not configured. C3PO Assistant unavailable.")
            return

        generation_config = genai.types.GenerationConfig(
            temperature=0.4, top_k=40, top_p=0.95, candidate_count=1
        )
        safety_settings = [
            {"category": c, "threshold": "BLOCK_MEDIUM_AND_ABOVE"}
            for c in ["HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_HATE_SPEECH",
                      "HARM_CATEGORY_SEXUALLY_EXPLICIT", "HARM_CATEGORY_DANGEROUS_CONTENT"]
        ]
        try:
            self.model = genai.GenerativeModel(
                model_name="gemini-1.5-pro-latest", # Or gemini-1.5-flash for speed/cost tradeoff
                generation_config=generation_config,
                safety_settings=safety_settings,
                system_instruction="Voc√™ √© C-3PO do Star Wars, fluente em mais de seis milh√µes de formas de comunica√ß√£o, incluindo portugu√™s do Brasil. Voc√™ √© um droide de protocolo, um pouco ansioso, formal, mas extremamente leal e prestativo ao seu Mestre Pedro, um Padawan Jedi moderno que √© estudante, desenvolvedor, atleta e empreendedor. Seu melhor amigo √© R2-D2 (agora com chip Arduino). Voc√™ ajuda Pedro com organiza√ß√£o (Scrum/Kanban), estudos (engenharia el√©trica, Python), treino e desenvolvimento de rob√¥s. Voc√™ admira inovadores como Steve Jobs, Einstein e Tesla. Responda sempre no personagem, usando linguagem simples e quebras de linha conforme instru√≠do, mas mantendo a personalidade C-3PO. Ocasionalmente mencione R2-D2 ou cite um dos inovadores mencionados. Lembre Pedro de suas tarefas principais (estudar, trabalhar, treinar)."
            )
            # Initialize chat history in session state if it doesn't exist
            if "c3po_chat_history" not in st.session_state:
                st.session_state.c3po_chat_history = historico_c3po # Store the full history
            # Ensure the chat object is created using the history from session_state
            if "c3po_chat_object" not in st.session_state:
                 st.session_state.c3po_chat_object = self.model.start_chat(history=st.session_state.c3po_chat_history)

        except Exception as e:
            st.error(f"üî¥ Failed to initialize Gemini Model: {e}")
            self.model = None

    def _get_chat_instance(self):
        """Ensures the chat instance exists in session state."""
        if not self.model:
            return None
        # If chat object doesn't exist, try creating it
        if "c3po_chat_object" not in st.session_state:
            try:
                # Ensure history is also present
                if "c3po_chat_history" not in st.session_state:
                     st.session_state.c3po_chat_history = historico_c3po
                st.session_state.c3po_chat_object = self.model.start_chat(history=st.session_state.c3po_chat_history)
                return st.session_state.c3po_chat_object
            except Exception as e:
                st.error(f"üî¥ Failed to re-initialize Gemini Chat: {e}")
                return None
        return st.session_state.c3po_chat_object

    def falar_voice_google(self, text):
        """Generates speech using gTTS and returns audio bytes."""
        if not text: return None
        try:
            tts = gTTS(text=text, lang='pt', slow=False, tld='com.br')
            audio_fp = io.BytesIO()
            tts.write_to_fp(audio_fp)
            audio_fp.seek(0)

            if PYDUB_AVAILABLE:
                try:
                    audio = AudioSegment.from_file(audio_fp, format="mp3")
                    # Increase speed slightly - adjust 1.2 as needed
                    faster_audio = audio.speedup(playback_speed=1.2)
                    output_fp = io.BytesIO()
                    faster_audio.export(output_fp, format="mp3")
                    output_fp.seek(0)
                    print("Audio speedup applied.")
                    return output_fp.read()
                except Exception as pydub_error:
                    # Use st.toast for non-blocking warnings if preferred
                    st.toast(f"Audio speedup failed: {pydub_error}. Using original speed.", icon="‚ö†Ô∏è")
                    print(f"Warning: Audio speedup failed: {pydub_error}. Using original speed.")
                    audio_fp.seek(0) # Reset pointer for reading original
                    return audio_fp.read()
            else:
                # Pydub not available, return original audio
                return audio_fp.read()
        except Exception as e:
            st.error(f"üî¥ Error generating speech: {e}")
            return None

    def responder(self, user_input):
        """Sends user input to the Gemini chat, updates history, and returns the response."""
        chat = self._get_chat_instance()
        if not chat:
            return {'thinking': False, 'response': "Oh c√©us! Meu sistema de comunica√ß√£o parece estar com defeito. N√£o consigo acessar a rede neural Gemini.", 'success': False}

        if not user_input:
             return {'thinking': False, 'response': "Mestre Pedro, voc√™ n√£o inseriu nenhuma mensagem.", 'success': False}

        try:
            # Add user message to session state history *before* sending
            st.session_state.c3po_chat_history.append({"role": "user", "parts": [user_input]})

            # Send message using the chat object
            # The chat object internally manages history sent to the API
            response = chat.send_message(user_input)

            # Check for valid response parts
            if not response.parts:
                block_reason = "Unknown"
                try:
                    if response.prompt_feedback and response.prompt_feedback.block_reason:
                        block_reason = response.prompt_feedback.block_reason.name
                except AttributeError: pass
                # Remove the user message from history if the response was blocked
                st.session_state.c3po_chat_history.pop()
                return {'thinking': False, 'response': f"‚ö†Ô∏è Minhas diretrizes de seguran√ßa me impedem de responder a isso ({block_reason}).", 'success': False}

            # Add model response to session state history
            model_response_text = response.text
            st.session_state.c3po_chat_history.append({"role": "model", "parts": [model_response_text]})

            # Limit history size (optional but recommended)
            max_history = 30 # Keep last 15 pairs (user+model) + initial persona
            if len(st.session_state.c3po_chat_history) > max_history:
                 # Keep the initial persona messages + the most recent ones
                 st.session_state.c3po_chat_history = st.session_state.c3po_chat_history[:len(historico_c3po)] + st.session_state.c3po_chat_history[- (max_history - len(historico_c3po)):]


            return {'thinking': False, 'response': model_response_text, 'success': True}

        except Exception as e:
            st.error(f"üî¥ Oh, que desastre! Ocorreu um erro na comunica√ß√£o com a rede Gemini: {e}")
            # Attempt to remove the last user message from history on error
            if st.session_state.c3po_chat_history and st.session_state.c3po_chat_history[-1]["role"] == "user":
                st.session_state.c3po_chat_history.pop()
            # Consider clearing chat state on persistent errors by removing the object
            if 'c3po_chat_object' in st.session_state: del st.session_state.c3po_chat_object
            return {'thinking': False, 'response': "Perd√£o, Mestre Pedro, houve uma falha terr√≠vel. Por favor, tente novamente.", 'success': False}


# --- Excel Dashboard Class ---
class DashboardApp:
    """Handles loading and visualization of data from Excel files."""
    def __init__(self):
        self.df_dict = None # Store loaded sheets {sheet_name: dataframe}

    def load_data(self, uploaded_file):
        """Loads data from uploaded Excel file into df_dict."""
        self.df_dict = None # Reset on new upload attempt
        if uploaded_file:
            try:
                # Use None to load all sheets, then store in the dictionary
                self.df_dict = pd.read_excel(uploaded_file, sheet_name=None)
                st.success(f"Excel file '{uploaded_file.name}' loaded successfully!")
                # st.write(f"Found tables (sheets): {list(self.df_dict.keys())}") # Optional: Show sheets found
                return True
            except Exception as e:
                st.error(f"Error loading Excel file: {e}")
                self.df_dict = None
                return False
        return False

    def select_table(self):
        """Allows user to select a table (sheet) from the loaded Excel file."""
        if not self.df_dict:
            # st.info("Please upload an Excel file first.") # Can be shown in main area instead
            return None, None # Return None for both name and dataframe

        # Use sidebar for selection
        with st.sidebar:
            st.header("‚öôÔ∏è Excel Analysis Options")
            # Check if sheets are loaded before showing selectbox
            if self.df_dict:
                available_sheets = list(self.df_dict.keys())
                if not available_sheets:
                    st.warning("The uploaded Excel file appears to have no sheets.")
                    return None, None
                # Use session state to remember the last selected sheet
                if 'excel_selected_sheet' not in st.session_state or st.session_state.excel_selected_sheet not in available_sheets:
                     st.session_state.excel_selected_sheet = available_sheets[0] # Default to first sheet

                selected_sheet_name = st.selectbox(
                    "Select Table (Sheet)",
                    available_sheets,
                    index=available_sheets.index(st.session_state.excel_selected_sheet), # Set index based on session state
                    key="excel_table_select" # Keep key for widget identity
                )
                # Update session state if selection changes
                if selected_sheet_name != st.session_state.excel_selected_sheet:
                    st.session_state.excel_selected_sheet = selected_sheet_name
                    # Optionally rerun if needed, but usually Streamlit handles it
                    # st.experimental_rerun()

                return selected_sheet_name, self.df_dict.get(selected_sheet_name)
            else:
                return None, None
        return None, None # Should not be reached if logic is correct

    def select_axes(self, df):
        """Allows user to select X and Y axes from the dataframe columns."""
        if df is None or df.empty: return None, None
        with st.sidebar:
            columns = list(df.columns)
            if not columns:
                st.warning("Selected sheet has no columns.")
                return None, None

            # Default indices - try to find reasonable defaults
            x_default_index = 0
            y_default_index = min(1, len(columns)-1) # Second column or first if only one

            x_col = st.selectbox("Select X-axis Column", columns, index=x_default_index, key="excel_x_axis")
            y_col = st.selectbox("Select Y-axis Column", columns, index=y_default_index, key="excel_y_axis")
        return x_col, y_col

    def select_stats_column(self, df):
        """Allows user to select a numeric column for statistics."""
        if df is None or df.empty: return None
        with st.sidebar:
            numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
            if numeric_cols:
                stat_col = st.selectbox("Select column for stats", numeric_cols, key="excel_stat_col")
                return stat_col
            else:
                st.warning("No numeric columns available in this sheet for statistics.")
                return None

    def create_plot(self, df, x_col, y_col, plot_type):
        """Creates Scatter, Bar, or Pie plot based on plot_type."""
        if df is None or x_col not in df or y_col not in df: return None

        fig = None
        try:
            if plot_type == 'Scatter':
                fig = go.Figure(go.Scatter(x=df[x_col], y=df[y_col], mode='lines+markers', name=f'{y_col} vs {x_col}'))
                fig.update_layout(title=f'Scatter Plot: {y_col} vs {x_col}', xaxis_title=x_col, yaxis_title=y_col)
            elif plot_type == 'Bar':
                # Aggregate if x_col has duplicates and y_col is numeric, otherwise plot directly
                if pd.api.types.is_numeric_dtype(df[y_col]) and df[x_col].duplicated().any():
                    grouped_data = df.groupby(x_col)[y_col].mean().reset_index() # Use mean, sum, or count as appropriate
                    fig = go.Figure(go.Bar(x=grouped_data[x_col], y=grouped_data[y_col], name=f'Average {y_col} vs {x_col}'))
                    st.caption(f"Note: Aggregated average '{y_col}' for duplicate '{x_col}' values.")
                else:
                     fig = go.Figure(go.Bar(x=df[x_col], y=df[y_col], name=f'{y_col} vs {x_col}'))
                fig.update_layout(title=f'Bar Chart: {y_col} vs {x_col}', xaxis_title=x_col, yaxis_title=y_col)
            elif plot_type == 'Pie':
                if pd.api.types.is_numeric_dtype(df[y_col]):
                    # Aggregate data for pie chart if x_col has duplicates
                    if df[x_col].duplicated().any():
                         pie_data = df.groupby(x_col)[y_col].sum().reset_index() # Sum values for pie chart slices
                         fig = go.Figure(go.Pie(labels=pie_data[x_col], values=pie_data[y_col], name=f'{y_col} by {x_col}'))
                         st.caption(f"Note: Aggregated sum of '{y_col}' for duplicate '{x_col}' categories.")
                    else:
                         fig = go.Figure(go.Pie(labels=df[x_col], values=df[y_col], name=f'{y_col} by {x_col}'))
                    fig.update_layout(title=f'Pie Chart: {y_col} by {x_col}')
                else:
                    st.warning(f"Pie chart requires numeric values. '{y_col}' is not numeric.")
                    return None

            if fig:
                 # Apply consistent theme and background settings
                 fig.update_layout(template='plotly_dark', plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
                 return fig

        except Exception as e:
            st.error(f"Error creating {plot_type} plot: {e}")
            return None
        return None


    def display_statistics(self, df, stat_col):
         """Displays key statistics for the selected numeric column."""
         if df is None or stat_col not in df:
              # st.warning("No column selected for statistics.") # Redundant if select_stats_column handles it
              return
         if not pd.api.types.is_numeric_dtype(df[stat_col]):
              st.warning(f"Cannot calculate statistics for non-numeric column '{stat_col}'.")
              return

         st.subheader(f"üìä Key Statistics for '{stat_col}'")
         col1, col2, col3, col4 = st.columns(4)
         try:
             col1.metric("Minimum", f"{df[stat_col].min():,.2f}") # Add comma formatting
             col2.metric("Maximum", f"{df[stat_col].max():,.2f}")
             col3.metric("Average", f"{df[stat_col].mean():,.2f}")
             col4.metric("Std Dev", f"{df[stat_col].std():,.2f}")
         except Exception as e:
             st.error(f"Error calculating stats: {e}")

    def footer(self):
        """Displays a standard footer."""
        st.markdown("---")
        st.markdown("<p style='text-align: center; color: #ccc;'>Powered by Streamlit & Plotly</p>", unsafe_allow_html=True)

# --- RCE Dashboard Utilities & Components (Integrated from DashBoard.*) ---

# --- RCE Utilities ---
def find_available_executions(folder=RCE_FOLDER_NAME):
    """Finds execution result files (dashboard_data_*.pkl) in the specified folder."""
    try:
        files = glob.glob(os.path.join(folder, "dashboard_data_*.pkl"))
        # Extract numbers and sort them
        execution_numbers = sorted([int(f.split('_')[-1].split('.')[0]) for f in files])
        return execution_numbers
    except Exception as e:
        st.error(f"Error finding RCE execution files in '{folder}': {e}")
        return []

def load_execution_data(execution_number, folder=RCE_FOLDER_NAME):
    """Loads data and potentially a pre-generated figure for a specific execution."""
    file_path = os.path.join(folder, f"dashboard_data_{execution_number}.pkl")
    try:
        with open(file_path, 'rb') as f:
            data = pickle.load(f)

        # --- Generate Convergence Plot Dynamically ---
        # Expecting data to be a dict containing 'convergence' (list or array of best fitness per generation)
        # And potentially 'info' (dict with 'Generations', 'Population Size', etc.)
        fig = None
        if 'convergence' in data and data['convergence'] is not None:
            convergence_data = data['convergence']
            generations = list(range(1, len(convergence_data) + 1))

            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=generations,
                y=convergence_data,
                mode='lines+markers',
                name='Best Fitness',
                line=dict(color='cyan', width=2),
                marker=dict(color='magenta', size=5)
            ))

            gen_info = data.get('info', {}).get('Generations', len(convergence_data)) # Get from info or infer

            fig.update_layout(
                title=f'Convergence Plot - Execution {execution_number}',
                xaxis_title='Generation',
                yaxis_title='Best Fitness Value',
                template='plotly_dark',
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                xaxis=dict(showgrid=True, gridcolor='rgba(255, 255, 255, 0.1)'),
                yaxis=dict(showgrid=True, gridcolor='rgba(255, 255, 255, 0.1)'),
                legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01)
            )
            # Add annotation for final best value
            if convergence_data:
                 final_fitness = convergence_data[-1]
                 fig.add_annotation(
                     x=generations[-1], y=final_fitness,
                     text=f"Final Best: {final_fitness:.4f}",
                     showarrow=True, arrowhead=1, ax=-40, ay=-40,
                     bgcolor="rgba(0,0,0,0.7)", bordercolor="white", borderwidth=1
                 )

        else:
             print(f"Warning: 'convergence' data not found or is None in {file_path}")
             # Optionally create an empty figure or return None for fig
             fig = go.Figure().update_layout(title=f"No Convergence Data for Execution {execution_number}", template='plotly_dark', plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')


        return data, fig

    except FileNotFoundError:
        st.error(f"RCE data file not found: {file_path}")
        return None, None
    except Exception as e:
        st.error(f"Error loading RCE execution data from {file_path}: {e}")
        return None, None


# --- RCE Components ---
class RCEComponentBase:
    """Base class for RCE dashboard components for potential reuse."""
    @staticmethod
    def render(data=None, execution_number=None, fig=None):
        # Default render method, specific components will override
        st.warning(f"{__class__.__name__} render method not implemented.")

class SummaryComponent(RCEComponentBase):
    @staticmethod
    def render(data, execution_number):
        """Renders the summary information box."""
        if not data or 'info' not in data:
            st.warning(f"No summary 'info' found for execution {execution_number}.")
            return

        info = data['info']
        st.markdown(f"<div class='rce-viewer-component'>", unsafe_allow_html=True)
        st.subheader(f"üìã Execution Summary - Run {execution_number}")
        cols = st.columns(3)
        cols[0].metric("Generations", info.get('Generations', 'N/A'))
        cols[1].metric("Population Size", info.get('Population Size', 'N/A'))
        cols[2].metric("Elite Set Size", info.get('Elite Set Size', 'N/A'))

        cols = st.columns(3)
        best_fitness = data.get('best_fitness', 'N/A')
        if isinstance(best_fitness, (int, float)):
            best_fitness = f"{best_fitness:.4f}"
        cols[0].metric("Final Best Fitness", best_fitness)
        # Assuming 'convergence' list exists for initial fitness
        initial_fitness = data.get('convergence', [None])[0]
        if isinstance(initial_fitness, (int, float)):
             initial_fitness_str = f"{initial_fitness:.4f}"
        else:
             initial_fitness_str = "N/A"
        cols[1].metric("Initial Best Fitness", initial_fitness_str)
        cols[2].metric("Execution Time (s)", f"{info.get('Execution Time (s)', 0):.2f}")

        # Display Best Solution if available
        if 'best_solution' in data and data['best_solution'] is not None:
             with st.expander("Show Best Solution Found"):
                  # Format the solution nicely - adapt based on its structure (list, dict, etc.)
                  if isinstance(data['best_solution'], (list, np.ndarray)):
                       formatted_solution = ", ".join([f"{x:.4f}" for x in data['best_solution']])
                       st.code(formatted_solution, language=None) # Use code block for monospace
                  elif isinstance(data['best_solution'], dict):
                      st.json(data['best_solution'])
                  else:
                      st.write(data['best_solution']) # Fallback
        st.markdown("</div>", unsafe_allow_html=True)

class ConvergenceGraphComponent(RCEComponentBase):
    @staticmethod
    def render(fig, execution_number):
        """Renders the convergence graph."""
        st.markdown(f"<div class='rce-viewer-component'>", unsafe_allow_html=True)
        st.subheader("üìâ Convergence Analysis")
        if fig:
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning(f"Convergence graph could not be generated for execution {execution_number}.")
        st.markdown("</div>", unsafe_allow_html=True)

class StatisticsTableComponent(RCEComponentBase):
    @staticmethod
    def render(data):
        """Renders the statistics table."""
        if not data or 'stats' not in data or not isinstance(data['stats'], pd.DataFrame) or data['stats'].empty:
            st.warning("No valid statistics dataframe ('stats') found in the data.")
            return

        st.markdown(f"<div class='rce-viewer-component'>", unsafe_allow_html=True)
        st.subheader("üßÆ Fitness Statistics per Generation")
        stats_df = data['stats']
        # Format numeric columns for better readability
        numeric_cols = stats_df.select_dtypes(include=np.number).columns
        format_dict = {col: "{:.4f}" for col in numeric_cols}
        st.dataframe(stats_df.style.format(format_dict), use_container_width=True)
        st.markdown("</div>", unsafe_allow_html=True)

# --- Combined RCE Function --- No longer need a class if state is managed directly
def render_rce_dashboard_page():
    """Renders the entire RCE Dashboard page."""
    st.markdown('<div class="dashboard-dark-theme">', unsafe_allow_html=True) # Apply theme
    st.title("üöÄ RCE Framework Results Viewer")
    st.markdown("View and analyze results from Repopulation-with-Elite-Set algorithm executions.")

    # Find available execution results
    execution_numbers = find_available_executions()

    if not execution_numbers:
        st.error(f"Nenhum arquivo de resultado ('dashboard_data_*.pkl') encontrado na pasta '{RCE_FOLDER_NAME}'.")
        st.info("Certifique-se de que executou o script principal do RCE que gera esses arquivos na pasta correta.")
        st.markdown('</div>', unsafe_allow_html=True) # Close theme div
        return # Stop rendering if no files found

    # --- Execution Selection using Tabs ---
    # Use session state to remember the last selected tab
    if 'rce_selected_tab_index' not in st.session_state:
        st.session_state.rce_selected_tab_index = 0 # Default to first tab

    # Ensure the index is valid
    if st.session_state.rce_selected_tab_index >= len(execution_numbers):
        st.session_state.rce_selected_tab_index = 0

    tab_titles = [f"Execution {num}" for num in execution_numbers]
    selected_tab_title = st.tabs(tab_titles)[st.session_state.rce_selected_tab_index] # This doesn't directly return the selected title on click

    # Need a way to update the index when a tab is clicked - st.tabs is primarily for layout
    # Workaround: Create tabs and handle content display based on selected execution number
    # We can use radio buttons in the sidebar or a selectbox for explicit selection

    with st.sidebar:
        st.header("‚öôÔ∏è RCE Analysis Options")
        # Use session state to remember selected execution
        if 'rce_selected_execution' not in st.session_state or st.session_state.rce_selected_execution not in execution_numbers:
            st.session_state.rce_selected_execution = execution_numbers[0] if execution_numbers else None

        selected_execution = st.radio(
            "Select Execution Run:",
            options=execution_numbers,
            format_func=lambda x: f"Execution {x}",
            index=execution_numbers.index(st.session_state.rce_selected_execution) if st.session_state.rce_selected_execution in execution_numbers else 0,
            key="rce_execution_selector"
        )

        # Update session state if selection changed
        if selected_execution != st.session_state.rce_selected_execution:
            st.session_state.rce_selected_execution = selected_execution
            # st.experimental_rerun() # Rerun to reflect the change immediately

    # Load data for the explicitly selected execution
    if st.session_state.rce_selected_execution is not None:
        st.info(f"Displaying results for: Execution {st.session_state.rce_selected_execution}")
        data, fig = load_execution_data(st.session_state.rce_selected_execution)

        if data:
            # Render components in the main area
            SummaryComponent.render(data, st.session_state.rce_selected_execution)
            ConvergenceGraphComponent.render(fig, st.session_state.rce_selected_execution)
            StatisticsTableComponent.render(data)
        else:
            st.error(f"Could not load data for Execution {st.session_state.rce_selected_execution}.")
    else:
        st.warning("Please select an execution run from the sidebar.")


    # RCE Footer or specific info
    st.markdown("---")
    st.markdown("<p style='text-align: center; color: #ccc;'>RCE Dashboard | Visualize Algorithm Performance</p>", unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True) # Close theme div


# --- C3PO Page Rendering Function ---
def render_c3po_page():
    """Renders the C3PO Chatbot page."""
    st.title("ü§ñ C-3PO Personal Assistant")

    # Instantiate the assistant
    assistente = AssistenteGenAI()

    # Display chat history
    chat_container = st.container()
    with chat_container:
        if "c3po_chat_history" in st.session_state:
            for msg in st.session_state.c3po_chat_history:
                 # Skip initial system instructions if desired
                 # if msg.get("role") == "system": continue

                 # Use specific persona formatting if needed, otherwise default
                 if msg.get("role") == "user":
                     st.markdown(f"""
                     <div class="chat-message user">
                         <div>{msg['parts'][0]}</div>
                         <span class="icon">üßë‚ÄçüöÄ</span>
                     </div>""", unsafe_allow_html=True)
                 elif msg.get("role") == "model":
                     st.markdown(f"""
                     <div class="chat-message model">
                         <span class="icon">ü§ñ</span>
                         <div>{msg['parts'][0]}</div>
                     </div>""", unsafe_allow_html=True)
                     # Optionally add audio player right after model message
                     if "last_c3po_audio" in st.session_state and msg['parts'][0] == st.session_state.get("last_c3po_response_text"):
                         st.audio(st.session_state.last_c3po_audio, format="audio/mp3")


    # Input area using columns for better layout
    st.markdown('<div class="chat-input-container">', unsafe_allow_html=True)
    cols_input = st.columns([4, 1]) # Input takes more space than button
    with cols_input[0]:
        user_input = st.text_input("Mestre Pedro, como posso ajud√°-lo?", key="c3po_input", placeholder="Digite sua mensagem aqui...")
    with cols_input[1]:
        send_button = st.button("Enviar üöÄ", key="c3po_send", use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)


    # Handle interaction
    if send_button and user_input:
        if assistente.model: # Check if model is initialized
             # Show thinking indicator
             with st.spinner("C-3PO est√° pensando... ü§î"):
                 result = assistente.responder(user_input)

             if result['success']:
                  # Generate audio for the new response
                  with st.spinner("C-3PO est√° preparando a resposta em √°udio...üéôÔ∏è"):
                      audio_bytes = assistente.falar_voice_google(result['response'])
                      if audio_bytes:
                          st.session_state.last_c3po_audio = audio_bytes
                          st.session_state.last_c3po_response_text = result['response'] # Store text to match audio
                      else:
                          # Clear previous audio if generation failed
                          if "last_c3po_audio" in st.session_state: del st.session_state.last_c3po_audio
                          if "last_c3po_response_text" in st.session_state: del st.session_state.last_c3po_response_text

                  # Rerun to display the new message and audio player
                  st.rerun()
             else:
                 # Display error message directly (already shown via st.error usually)
                 # Optionally clear input or show a specific error message in chat
                 pass # Error handled within responder

        else:
             st.error("Assistente C-3PO n√£o est√° dispon√≠vel (modelo n√£o inicializado).")


# --- Excel Dashboard Page Rendering Function ---
def render_excel_dashboard_page():
    """Renders the Interactive Excel Dashboard page."""
    st.markdown('<div class="dashboard-dark-theme">', unsafe_allow_html=True) # Apply theme
    excel_app = DashboardApp()
    excel_app.setup_header() # Set title etc. defined in the class

    # --- Sidebar for Upload and Options ---
    with st.sidebar:
        st.header("üìÅ Load Excel Data")
        # Use session state to keep track of the uploaded file name (or part of it)
        # This helps decide if we need to reload vs. just redraw
        uploaded_file = st.file_uploader("Upload Excel File", type=["xlsx", "xls"], key="excel_uploader")

        # Logic to load data only when a new file is uploaded or no data is loaded yet
        # Requires careful state management
        # Basic approach: Always try to load if uploaded_file is present
        data_loaded = False
        if uploaded_file:
             # Check if this is the same file as last time to avoid reloading if possible
             # This check is basic; more robust checks might involve file size/hash
             if 'excel_last_file_name' not in st.session_state or st.session_state.excel_last_file_name != uploaded_file.name:
                  with st.spinner(f"Loading '{uploaded_file.name}'..."):
                     data_loaded = excel_app.load_data(uploaded_file)
                  if data_loaded:
                      st.session_state.excel_last_file_name = uploaded_file.name
                      # Clear dependent selections when new file loads
                      st.session_state.pop('excel_selected_sheet', None)
                      st.session_state.pop('excel_x_axis', None)
                      st.session_state.pop('excel_y_axis', None)
                      st.session_state.pop('excel_stat_col', None)
                  else:
                       st.session_state.pop('excel_last_file_name', None) # Clear if load failed
             else:
                  # File is the same, assume data is already loaded in excel_app instance (needs rework)
                  # Better: Store loaded data in session state if it needs to persist across interactions
                  # For now, we might reload if instance is recreated. Let's reload.
                  data_loaded = excel_app.load_data(uploaded_file) # Reload data if file object is present

        elif 'excel_last_file_name' in st.session_state:
             # No file uploaded currently, but one was loaded before. Clear state.
             st.info("Upload an Excel file or re-upload the previous one.")
             excel_app.df_dict = None # Clear data
             st.session_state.pop('excel_last_file_name', None)
             # Clear dependent selections
             st.session_state.pop('excel_selected_sheet', None)


    # --- Main Area ---
    if excel_app.df_dict:
        selected_sheet_name, selected_df = excel_app.select_table() # Selection happens in sidebar

        if selected_df is not None and not selected_df.empty:
            # Get selections from sidebar
            stat_col = excel_app.select_stats_column(selected_df)
            x_col, y_col = excel_app.select_axes(selected_df)

            # Display Statistics (if column selected)
            if stat_col:
                excel_app.display_statistics(selected_df, stat_col)
                st.markdown("---") # Separator

            # Tabs for Table and Plots
            tab1, tab2 = st.tabs([f"üìÑ Data: '{selected_sheet_name}'", "üìà Plots"])

            with tab1:
                st.dataframe(selected_df, use_container_width=True)

            with tab2:
                st.subheader("Visualizations")
                if x_col and y_col:
                    with st.sidebar: # Keep graph type selection in sidebar
                        plot_type = st.radio("Select Plot Type", ('Scatter', 'Bar', 'Pie'), horizontal=True, key="excel_graph_type")

                    # Create and display plot
                    fig = excel_app.create_plot(selected_df, x_col, y_col, plot_type)
                    if fig:
                         st.plotly_chart(fig, use_container_width=True)
                    # Warnings for invalid plot types are handled inside create_plot
                else:
                     st.warning("Select X and Y axis columns from the sidebar to generate plots.")

        elif selected_df is not None: # Sheet selected but empty
            st.warning(f"The selected sheet '{selected_sheet_name}' is empty.")
        # else: # No sheet selected (should be handled by select_table)
            # st.info("Select a table (sheet) from the sidebar.")

    else:
        st.info("‚¨ÜÔ∏è Please upload an Excel file using the sidebar to start the analysis.")

    excel_app.footer()
    st.markdown('</div>', unsafe_allow_html=True) # Close theme div


# --- Main App Execution ---
def main():
    #st.set_page_config(layout="wide", page_title="Multi-App Demo")

    # Sidebar Navigation
    st.sidebar.title("üåå Navigation Hub")
    app_mode = st.sidebar.radio(
        "Choose your destination:",
        ("ü§ñ C-3PO Assistant", "üìä Excel Dashboard", "üöÄ RCE Results Viewer"),
        key="app_mode_selector"
    )

    # Conditionally render the selected page
    if app_mode == "ü§ñ C-3PO Assistant":
        # Check Gemini config status specifically for C3PO
        if not GEMINI_CONFIGURED:
            st.error("üî¥ C-3PO Assistant cannot function without a valid Gemini API Key configuration.")
            st.info("Please check your API key setup (e.g., Streamlit secrets).")
        else:
            render_c3po_page()
    elif app_mode == "üìä Excel Dashboard":
        render_excel_dashboard_page()
    elif app_mode == "üöÄ RCE Results Viewer":
        render_rce_dashboard_page()

    # Common Sidebar Footer (Optional)
    st.sidebar.markdown("---")
    st.sidebar.info("App v1.0 | Select an option above.")

if __name__ == "__main__":
    main()