"""
AI-Speech Integration code, that does:

    1- Speech to text conversion
    2- Generates AI model's response
    3- Converts Text to Speech

"""

# ------------------- Import Libraries -------------------
import vosk
import pyaudio
import json
import pygame
import google.generativeai as genai
from openai import OpenAI
import io

# ------------------- Initializations -------------------

# Initialize Pygame mixer
pygame.mixer.init()

# Initialize VOSK model
model = vosk.Model("../Resources/vosk-model-en-us-0.22")
recognizer = vosk.KaldiRecognizer(model, 16000)

# Configure Gemini API with your API key
genai.configure(api_key="AIzaSyAmbzv22IoSmVszcl5g2TI1-gyMmODPG9o")

# Configure OpenAI Text-to-Speech API
client = OpenAI(api_key="sk-proj-GyXnA7wkEF0Euzt7WKhTT3BlbkFJsWytiP1LcfhC80pLtnAU")



# ------------------- Utility Functions -------------------

def play_sound(file_path):
    """
    Plays an audio file using pygame.

    Args:
        file_path (str): Path to the audio file.
    """
    pygame.mixer.music.load(file_path)
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():  # Wait for audio to finish playing
        pygame.time.Clock().tick(5)

# ------------------- Speech-to-Text Function -------------------

def listen_with_vosk():
    """
    Captures audio from the microphone and converts it to text using VOSK.

    Returns:
        str: Transcribed text from speech.
    """
    mic = pyaudio.PyAudio()  # Initialize microphone
    stream = mic.open(
        format=pyaudio.paInt16, channels=1, rate=16000, input=True, frames_per_buffer=8192
    )
    stream.start_stream()
    print("Listening ...")
    play_sound("../Resources/listen.mp3")  # Play listening sound

    while True:
        data = stream.read(8192)
        if len(data) == 0:  # Skip if no audio data
            continue

        if recognizer.AcceptWaveform(data):  # Recognize speech
            play_sound("../Resources/convert.mp3")  # Play conversion sound
            result = recognizer.Result()  # Get result from recognizer
            text = json.loads(result)["text"]  # Extract text
            print("You said: " + text)
            return text

# ------------------- AI Text Generation Function -------------------

def gemini_api(text):
    """
    Sends input text to the Gemini API and retrieves the generated response.

    Args:
        text (str): Input text for the API.

    Returns:
        str: Generated response text from Gemini API.
    """
    # Initialize a genAI model
    model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest")

    # Generate a response based on the input text
    response = model.generate_content(text)
    print(response.text)  # Print the response
    return response.text

# ------------------- Text-to-Speech Function -------------------

def openai_text_to_speech(text):
    """
    Converts input text to speech using OpenAI's Text-to-Speech API.

    Args:
        text (str): Text to convert to speech.

    Returns:
        bytes: Binary audio content generated by the API.
    """
    # Generate speech
    response = client.audio.speech.create(
        model="tts-1",
        voice="alloy",
        input=text
    )
    # Extract audio content from the response
    audio_content = response.read()  # Read the binary content
    return audio_content

def play_audio(audio_bytes):
    """
    Plays audio content using pygame.

    Args:
        audio_bytes (bytes): Binary audio content to play.
    """
    pygame.mixer.init()
    pygame.mixer.music.load(io.BytesIO(audio_bytes))  # Load audio from bytes
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():  # Wait for playback to finish
        pygame.time.Clock().tick(10)

# ------------------- Main Loop -------------------

# Continuously listen, process, and respond
while True:
    # Step 1: Convert speech to text
    text = listen_with_vosk()  # Speech recognition

    # Step 2: Generate a response using Gemini API
    ai_response = gemini_api(text)  # Text generation

    # Step 3: Convert the response to speech
    audio_content = openai_text_to_speech(ai_response)  # Text-to-speech

    # Step 4: Play the generated audio
    play_audio(audio_content)  # Play response
